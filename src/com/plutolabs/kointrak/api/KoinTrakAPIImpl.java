package com.plutolabs.kointrak.api;

/**
 * Created by chipwasson on 11/15/14.
 */

import com.google.gson.*;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

/**
 * Created by chipwasson on 11/15/14.
 */
public class KoinTrakAPIImpl  {
    private boolean debugLog = false;
    private static final String baseApiURL = "https://csucrypto.com/kointrak/api";
    private static final Gson gson = new GsonBuilder().create();

    public KoinTrakAPIImpl() { }

    private static KoinTrakAPIImpl instance;
    public static synchronized KoinTrakAPIImpl getInstance() {
        if(instance==null) instance = new KoinTrakAPIImpl();
        return instance;
    }

    public AddressImport doInBackground(String... code) throws IOException {
        return getAddressFromCode(code[0]);
    }

    protected void onProgressUpdate(Integer... progress) {
        return;
    }

    /**
     * Gets the addresses from a shortcode. Allows the user to transfer addresses via a browser.
     * @param code The short code generated by the browser
     * @return AddressImport object
     * @throws IOException
     */
    public AddressImport getAddressFromCode(String code) throws IOException {
        URL url = null;
        AddressImport addressImport = null;
        try {
            url = new URL(
                    baseApiURL+
                            "/E987fJDICa/get_addresses/"+
                            URLEncoder.encode(code, "UTF-8"));
            if(debugLog)System.out.println("KoinTrakAPIImpl getting address: "+url.toString());
            addressImport = gson.fromJson(getJsonFromUrl(url), AddressImport.class);
        } catch (MalformedURLException e) { e.printStackTrace(); }
        return addressImport;
    }

    private static JsonParser jsonParser = new JsonParser();
    private static JsonElement getJsonFromUrl(URL url) throws IOException {
        JsonElement element = jsonParser.parse(new InputStreamReader(url.openStream()));
        if(element.isJsonObject()) {
            JsonObject jo = element.getAsJsonObject();
            if(jo.get("result").equals("false"))
                ; // handle errors
            else{
                return jo;
            }
        } return null;
    }

    /**
     * Enables syso debug strings.
     */
    public void enableDebug(){
        debugLog = true;
    }

    /**
     * Disable syso debug strings.
     */
    public void diableDebug(){
        debugLog = false;
    }

}

